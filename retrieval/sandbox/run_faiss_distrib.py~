# lawrence mcafee

# ~~~~~~~~ import ~~~~~~~~
import os
import re


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dummynode_lists = [
    # "clip-g1-[0-1],clip-g2-[2-3]",
    # "clip-g1-0,clip-g2-0",
    # "clip-g1-0,clip-g2-1",
    # "clip-g1-1",
    # "clip-a-[1,3,5]",
    # "clip-b-[1-3,5]",
    # "clip-c-[1-3,5,9-12]",
    "clip-c-[1-3,5,9-12]-hi",
    # "clip-d-[5,9-12]",
    # "clip-e-[5,9],clip-e-[15-19]",
    # "clip-f-[5,9],clip-f-[15,17]",
    # "clip-f-5,clip-f-[15,17]",
    # "clip-f-[5,9],clip-f-175"
]

def parse_node_list(node_list_str):

    left_brace_indexes = [ m.start() for m in re.finditer("\[", node_list_str) ]
    right_brace_indexes = [ m.start() for m in re.finditer("\]", node_list_str) ]

    assert len(left_brace_indexes) == len(right_brace_indexes)
    assert len(left_brace_indexes) <= 1
    if len(left_brace_indexes) == 0:
        return node_list_str
    left_brace_index = left_brace_indexes[0]
    right_brace_index = right_brace_indexes[0]
    assert left_brace_index < right_brace_index

    brace_str = node_list_str[(left_brace_index+1):right_brace_index]
    node_ids = []
    for comma_group in brace_str.split(","):
        crnt_ids = [ int(i) for i in comma_group.split("-") ]
        if len(crnt_ids) == 1:
            node_ids.append(crnt_ids[0])
        elif len(crnt_ids) == 2:
            node_ids.extend(range(crnt_ids[0], crnt_ids[1] + 1))
        else:
            raise Exception("specialize for len(ids) == %d." % len(crnt_ids))
        # pax({
        #     "comma_group" : comma_group,
        #     "crnt_ids" : crnt_ids,
        #     "node_ids" : node_ids,
        # })

    node_keys = [ (
        node_list_str[:left_brace_index] +
        str(i) +
        node_list_str[(right_brace_index+1):]
    ) for i in node_ids ]

    # pax({
    #     "node_list_str" : node_list_str,
    #     "left_brace_index" : left_brace_index,
    #     "right_brace_index" : right_brace_index,
    #     "brace_str" : brace_str,
    #     "node_ids" : node_ids,
    #     "node_keys" : node_keys,
    # })

    return node_keys

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def run_faiss_distrib_client(args, data, timer):

    # >>>
    print(">> client.")
    return
    # <<<

    node_list_str = os.environ["SLURM_JOB_NODELIST"]
    node_keys = parse_node_list(node_list_str)

    pax({
        # "dummy_node_lists" : dummy_node_lists,
        # "dummy_node_lists / parsed" :
        # [ parse_node_list(a) for a in dummy_node_lists ],
        "node_list_str" : node_list_str,
        "node_keys" : node_keys,
    })

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def run_faiss_distrib_server(args, data, timer):

    # >>>
    print(">> server.")

    return
    # <<<

    node_list_str = os.environ["SLURM_JOB_NODELIST"]
    node_keys = parse_node_list(node_list_str)

    pax({
        # "dummy_node_lists" : dummy_node_lists,
        # "dummy_node_lists / parsed" :
        # [ parse_node_list(a) for a in dummy_node_lists ],
        "node_list_str" : node_list_str,
        "node_keys" : node_keys,
    })

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def run_faiss_distrib(args, data, timer):

    if args.role == "client":
        run_faiss_distrib_client(args, data, timer)
    elif args.role == "server":
        run_faiss_distrib_server(args, data, timer)
    else:
        raise Exception("specialize for role '%s'." % args.role)

# eof
