# lawrence mcafee

# ~~~~~~~~ import ~~~~~~~~
# import faiss
# import os

# from lutil import pax

from lawrence.index import Index
# import lawrence.utils as utils

from .hnsw import HNSWIndex
from .ivf import IVFIndex

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# class IVFHNSWStage(Index):
# class IVFHNSW(Index):
class IVFHNSWIndex(Index):

    def __init__(self, args, d, stage_str):
        super().__init__(args, d)

        tokens = stage_str.split("_")
        assert len(tokens) == 2
        assert tokens[0].startswith("IVF") # redundant
        assert tokens[1].startswith("HNSW")

        self.nlist = int(tokens[0].replace("IVF", ""))
        self.m = int(tokens[1].replace("HNSW", ""))

        args.nlist = self.nlist

        self.ivf = IVFIndex(args, d, self.nlist)
        self.hnsw = HNSWIndex(args, d, self.m)

    def dout(self):
        return self.din()

    def verbose(self, v):
        self.ivf.verbose(v)
        self.hnsw.verbose(v)

    def train(self, input_data_path, dir_path, timer):

        ivf_dir_path = utils.make_sub_dir(dir_path, "ivf")
        hnsw_dir_path = utils.make_sub_dir(dir_path, "hnsw")

        ivf_output_data_path = self.ivf.train(
            input_data_path,
            ivf_dir_path,
            timer,
        )
        raise Exceptions("centroids saved?")
        hnsw_output_data_path = self.ivf.train(
            ivf_output_data_path,
            hnsw_dir_path,
            timer,
        )

        pax({
            "input_data_path" : input_data_path,
            "ivf_output_data_path" : ivf_output_data_path,
            "hnsw_output_data_path" : hnsw_output_data_path,
        })

        return ivf_output_data_path

# eof
