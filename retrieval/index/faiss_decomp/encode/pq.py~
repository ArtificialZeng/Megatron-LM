# lawrence mcafee

# ~~~~~~~~ import ~~~~~~~~
import faiss

from lawrence.index import Index

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# class PQStage(Index):
class PQIndex(Index):

    def __init__(self, args, d, m):
        super().__init__(args, d)
        self.m = m
        self.pq = faiss.IndexPQ(self.din(), self.m, 8)

    def dout(self):
        return self.m

    # def init(self):
    #     self.pq = faiss.IndexPQ(self.nfeats, self.m, 8)

    def verbose(self, v):
        self.c_verbose(self.pq, v)

    # def train(self, input_data_path, dir_path, timer):

    #     # filename = os.path.join(dirname, "empty.faissindex")
    #     filename = self.get_empty_index_path(dirname)
    #     if os.path.isfile(filename):
    #         return

    #     timer.push("train")
    #     self.pq.train(data_map_0["data"])
    #     timer.pop()

    #     timer.push("save")
    #     faiss.write_index(self.pq, filename)
    #     timer.pop()

    #     # timer.push("output")
    #     # timer.pop()

    #     # return {}
    def train(self, input_data_path, dir_path, timer):

        empty_index_path = self.get_empty_index_path(dir_path)
        # output_data_path = self.get_output_data_path(dir_path)

        # pax({
        #     "empty_index_path" : empty_index_path,
        #     "input_data_path" : input_data_path,
        #     "output_data_path" : output_data_path,
        # })

        if not os.path.isfile(empty_index_path):

            timer.push("train")
            inp = utils.load_data(input_data_path)["data"]
            # pax({"inp": inp})
            self.pq.train(inp)
            faiss.write_index(self.pq, empty_index_path)
            timer.pop()

        # if not os.path.isfile(output_data_path):
        #     ...

        return None

    def add(self, data_map_0):
        self.pq.add(data_map_0["data"])

# eof
